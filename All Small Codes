package Milind;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Scanner;
public class lowercase {
    Scanner ss=new Scanner(System.in);
	void one()//upper case to lower case
	{
		String s="Milind Dev";
		for(int i=0;i<s.length();i++)
		{
			char c=s.charAt(i);
			if(s.charAt(i)>=65 && s.charAt(i)<=90)
			c=	(char)(s.charAt(i)+32);
			System.out.print(c);
		}
	}
	void two()//lower case to upper case
	{
		String s="MIlind Dev";
		for(int i=0;i<s.length();i++)
		{
			char c=s.charAt(i);
			if(s.charAt(i)>=96 && s.charAt(i)<=120)
			c=	(char)(s.charAt(i)-32);
			System.out.print(c);
		}
	}
	void three()//factorial
	{
		int num=1;
		for(int i=1;i<10;i++)
			num=num*i;
		System.out.println(num);
	}
	void four()//count number of vowels
	{
		String s="Milind Dev";
		int count=0;
		for(int i=0;i<s.length();i++)
		{
			char c=s.charAt(i);
			switch(c)
			{
			case 'a':
			case 'e':
			case 'i':
			case 'o':
			case 'u':
			case 'A':
			case 'E':
			case 'I':
			case 'O':
			case 'U':
				count++;
				break;
			}
		}
		System.out.println(count);
	}
	void five()//max and min three value from arrays
	{
		int[] arr={5,4,8,2,3,6,9,1,2};
		Arrays.sort(arr);
		System.out.println(arr[arr.length-1]);
		System.out.println(arr[arr.length-2]);
		System.out.println(arr[arr.length-3]);
		System.out.println(arr[0]);
		System.out.println(arr[1]);
		System.out.println(arr[2]);
	}
	void six()//remove duplicate char from a string
	{
		String s="Milind Dev";
		String s1="";
		LinkedHashSet<Character> li=new LinkedHashSet<Character>();
		for(int i=0;i<s.length();i++)
			li.add(s.charAt(i));
		for(char p : li)
			s1=s1+p;
		System.out.println(s1);
	}
	void seven()//reverse array
	{
		int[] arr={5,4,8,2,3,6,9,1,2};
		Arrays.sort(arr);
		for(int i=0;i<arr.length;i++)
		System.out.println(arr[i]);
		for(int i=arr.length-1;i>=0;i--)
			System.out.println(arr[i]);
	}
	void eight()//swap number using temp variable
	{
		int i=5,j=10,temp;
		temp=i;
		i=j;
		j=temp;
		System.out.println(i+" "+j);
	}
	void nine()//swap number without using temp variable
	{
		int i=5,j=10;
		i=i+j;
		j=i-j;
		i=i-j;
		System.out.println(i+" "+j);
	}
	void ten()// addition of two byte
	{
		byte i=5,j=10;
		int m=i+j;
		System.out.println(m);
	}
	void eleven()//addition of array
	{
		int[] arr={5,4,8,2,3,6,9,1,2};
		int sum=0;
		for(int i=0;i<arr.length;i++)
		sum=sum+arr[i];
		System.out.println(sum);
	}
	void xii()//even odd using %
	{
		int i=6;
		if(i%2==0)
			System.out.println("even");
		else
			System.out.println("odd");
	}
	void xiii()//even odd without using %
	{
		int i=10;
		int num=(i/2)*2;
		if(num==i)
			System.out.println("even");
		else
			System.out.println("odd");
	}
	void xiv()//check given char is number or alpha
	{
		char c='5';
		if(c>='a' && c<='z')
			System.out.println("alphbet");
		else if(c>='0' && c<='9')
			System.out.println("number");
	}
	void xv()//polindrom string
	{
		String s="Milind";
		String rev="";
		for(int i=s.length()-1;i>=0;i--)
			rev=rev+s.charAt(i);
		if(rev.equals(s))
			System.out.println("palindrom");
		else
			System.out.println("not");
	}
	void xvi()//anagram string
	{
		String s="Milind";
		String s1="heslko";
		char[] arr=s.toCharArray();
		char[] ar=s1.toCharArray();
		Arrays.sort(arr);
		Arrays.sort(ar);
		System.out.println(Arrays.equals(arr, ar));
	}
	void xvii()//leap year
	{
		int y=2001;
		if(y/4==0)
			System.out.println("leap");
		else
			System.out.println("not");
	}
	void xviii()//facter of a number
	{
		int num=50;
		for(int i=1;i<num/2;i++)
		{
			if(num%i==0)
				System.out.println(i);
		}
	}
	void xix()//missing number in array
	{
		int[] arr={1,2,3,4,5,6,8,9};
		int sum=0,s=0;
		for(int i=0;i<arr.length;i++)
			sum=sum+arr[i];
		for(int i=1;i<=arr.length+1;i++)
			s=s+i;
		System.out.println(s-sum);
	}
	void xx()// print alpha
	{
		for(char c='a';c<='z';c++)
			System.out.println(c);
	}
	void xxi()//sorted string
	{
		String s="=Milind Dev";
		char[] c=s.toCharArray();
		Arrays.sort(c);
		System.out.println(c);
	}
	void xxii()//number of char in string
	{
		String s="this is a string and we are counting number of char in the string";
		int count=0;
		for(int i=0;i<s.length();i++)
		{
			if(s.charAt(i)==' ')
				count++;
		}
		System.out.println(s.length()-count);
	}
	void xxiii()//number of words in string
	{
		String s="this is a string and we are counting number of char in the string";
		String[] arr=s.split(" ");
		System.out.println(arr.length);
	}
	void xxiv()//armstrong number
	{
		int num=371;
		int n=num;
		int m,k=0,j;
		while(n>0)
		{
			m=n%10;
			n=n/10;
			j=m*m*m;
			k=k+j;
		}
		if(k==num)
			System.out.println("anagram number");
		else
			System.out.println("not");
	}
	void xxv()//reverse string position reserved
	{
		String s="this is string";
		String[] arr=s.split(" ");
		String rev="";
		for(int i=0;i<arr.length;i++)
		{
			String c=arr[i];
			String r="";
			for(int j=c.length()-1;j>=0;j--)
			{
				r=r+c.charAt(j);
			}
			rev=rev+r+" ";
		}
		System.out.println(rev);
	}
	void xxvi()//perfact number
	{
		int num=28;
		int sum=0;
		for(int i=1;i<=num/2;i++){
			if(num%i==0)
				sum=sum+i;
		}
		if(sum==num)
			System.out.println("perfact");
		else
			System.out.println("not");
	}
	void xxvii()//compare string
	{
		String s="Milind";
		String s1="Milind";
		if(s.equals(s1))
			System.out.println("same");
		else
			System.out.println("not");
	}
	void xxviii()//compare string
	{
		String s="Milind";
		String s1="Milind";
		boolean b=true;
		for(int i=0;i<s.length();i++)
		{
			if(s.charAt(i)!=s1.charAt(i))
				b=false;
		}
		if(b)
			System.out.println("same");
		else
			System.out.println("not");
	}
	void xxix()//reverse of array
	{
		int[] arr={1,5,8,7,2,3,6,4};
		for(int i=arr.length-1;i>=0;i--)
			System.out.println(arr[i]);
	}
	void xxx()//fibonaci series
	{
		int m=1,j=2,k=0;
		System.out.print(m+" "+j);
		for(int i=0;i<10;i++)
		{
			k=m+j;
			System.out.print(" "+k);
			m=j;
			j=k;
		}
	}
	void xxxi()//count number of given char in a string
	{
		String s="Milnd  Dev";
		char c='s';
		int count=0;
		for(int i=0;i<s.length();i++)
		{
			if(c==s.charAt(i))
				count++;
		}
		System.out.println(count);
	}
	void xxxii()//count duplicate char in string with remove duplicate
	{
		String s="Milind Dev";
		LinkedHashSet<Character> li=new LinkedHashSet<Character>();
		for(int i=0;i<s.length();i++)
			li.add(s.charAt(i));
		String n="";
		for(char c : li)
			n=n+c;
		int[] arr=new int[li.size()];
		for(int i=0;i<n.length();i++)
		{
			for(int j=0;j<s.length();j++)
			{
			if(n.charAt(i)==s.charAt(j))
			{
				arr[i]=arr[i]+1;
			}
			}
		}
		for(int i=0;i<arr.length;i++)
			System.out.println(n.charAt(i)+" "+arr[i]);
	}
	void xxxiii()//count duplicate char in a string
	{
		String s="Milind Dev";
		LinkedHashSet<Character> li=new LinkedHashSet<Character>();
		for(int i=0;i<s.length();i++)
			li.add(s.charAt(i));
		String n="";
		for(char c : li)
			n=n+c;
		int[] arr=new int[li.size()];
		for(int i=0;i<n.length();i++)
		{
			for(int j=0;j<s.length();j++)
			{
			if(n.charAt(i)==s.charAt(j))
			{
				arr[i]=arr[i]+1;
			}
			}
		}
		for(int i=0;i<arr.length;i++)
			System.out.println(n.charAt(i)+" "+arr[i]);
		int[] ar=new int[arr.length];
		for(int i=0;i<arr.length;i++)
			ar[i]=arr[i];
		Arrays.sort(ar);
		int num=ar[ar.length-1];
		System.out.println(num);
		for(int i=0;i<ar.length;i++)
		{
			if(num==arr[i])
				System.out.println(n.charAt(i));
		}
	}
	void xxxiv(int i)//print 1-100 without using loop
	{
		if(i>1)
			xxxiv(i-1);
	System.out.println(i);
	}
	void xxxv()//array contains duplicate or not
	{
		int[] arr={1,2,3,4,5,6,7};
		boolean b=true;
		for(int i=0;i<arr.length;i++)
		{
			for(int j=i+1;j<arr.length;j++)
			{
				if(arr[i]==arr[j])
					{b=false;
				break;}
			}
		}
		if(b)
			System.out.println("no");
		else
			System.out.println("yes");
	}
	void xxxvi()//print duplicate number from array
	{
		int[] arr={1,2,3,4,6,5,6,7};
		for(int i=0;i<arr.length;i++)
		{
			for(int j=i+1;j<arr.length;j++)
			{
				if(arr[i]==arr[j])
					System.out.println(arr[i]);
			}
		}
	}
	void xxxvii()//print duplicate number from array 2
	{
		int[] arr={1,2,3,4,6,5,6,7,7};
		Arrays.sort(arr);
		int[] num=new int[arr.length];
		int n=0;
		for(int i=0;i<arr.length-1;i++)
		{
				if(arr[i]==arr[i+1])
				{
				num[n]=arr[i];
				n++;
				}
		}
		for(int i=0;i<num.length;i++)
		{
			if(num[i]>0)
				System.out.println(num[i]);
		}
	}
	void xxxviii()//fibonic series
	{
	int i=0,j=1,m;
	System.out.print(i+" "+j);
	for(int l=0;l<10;l++)
	{
		m=i+j;
		System.out.print(" "+m);
		i=j;
		j=m;
	}
	}
	void xxxix()//reverse number using string
	{
		int num=123;
		String s=String.valueOf(num);
		String r="";
		for(int i=s.length()-1;i>=0;i--)
			r=r+s.charAt(i);
		int rev=Integer.valueOf(r);
		System.out.println(rev);
	}
	void xl()//reverse number
	{
		int num=123;
		int rev=0,j;
		while(num>0)
		{
			j=num%10;
			rev=(rev*10)+j;
			num=num/10;
		}
		System.out.println(rev);
	}
	void xli()//count given char in string
	{
		String s="Milind Dev";
		char c='h';
		int count=0;
		for(int i=0;i<s.length();i++)
		{
			if(s.charAt(i)==c)
				count=count+1;
		}
		System.out.println(count);
	}
	void xlii()//count given word in string
	{
		String s="this is string he is singing and she is eating";
		String[] sp=s.split(" ");
		int count=0;
		for(int i=0;i<sp.length;i++)
		{
			if(sp[i].equals("is"))
				count=count+1;
		}
		System.out.println(count);
	}
	void xliii()//check array contains duplicate or not
	{
		int[] arr={1,5,7,9,4,6,3,2,5,6,8,4};
		LinkedHashSet<Integer> li=new LinkedHashSet<Integer>();
		for(int i=0;i<arr.length;i++)
			li.add(arr[i]);
		if(arr.length==li.size())
			System.out.println("no");
		else
			System.out.println("yes");
	}
	void xliv()//print duplicate number from array
	{
		int[] arr={1,5,7,9,4,6,3,2,5,6,8,4};
		Arrays.sort(arr);
		for(int i=0;i<arr.length;i++)
		{
			for(int j=i+1;j<arr.length;j++)
			{
				if(arr[i]==arr[j]){
					System.out.println(arr[i]);
					break;
				}
			}
		}
	}
	void xlv()//print non duplicate and duplicate number from array
	{
		int[] arr={1,5,7,9,4,6,3,2,5,6,8,4};
		int[] ar=new int[arr.length];
		for(int i=0;i<arr.length;i++)
		{
			for(int j=0;j<arr.length;j++)
			{
				if(arr[i]==arr[j])
					ar[i]=ar[i]+1;
			}
		}
		System.out.println("non duplicate number in array");
		for(int i=0;i<arr.length;i++)
		{
			if(ar[i]==1)
				System.out.println(arr[i]);
		}
		System.out.println("duplicate number in array");
		for(int i=0;i<arr.length;i++)
		{
			if(ar[i]>1)
				System.out.println(arr[i]);
		}
	}
	void xlvi()//swap two String without using temp var
	{
		String s="Milind";
		String s1="Dev";
		s=s+s1;
		s1=s.substring(0, s.length()-s1.length());
		s=s.substring(s1.length());
		System.out.println(s+" \n"+s1);
	}
	void xlvii()//highest number from array
	{
		int[] arr={1,5,7,9,4,6,3,2,5,6,8,4};
		int num=arr[0];
		for(int i=0;i<arr.length;i++)
		{
			if(num<arr[i])
				num=arr[i];
		}
		System.out.println(num);
	}
	void xlviii()//highest repeated number in array
	{
		int[] arr={1,5,7,9,4,6,3,2,5,6,8,4,5};
		int[] ar=new int[arr.length];
		for(int i=0;i<arr.length;i++)
		{
			for(int j=i;j<arr.length;j++)
			{
				if(arr[i]==arr[j])
					ar[i]=ar[i]+1;
			}
		}
		int num=ar[0],m=0;
		for(int i=0;i<ar.length;i++)
		{
			if(num<ar[i])
			{
				num=ar[i];
				m=i;
			}
		}
		System.out.println(arr[m]);
	}
	void xlix()//print all subString of a String
	{
		String s="Milind";
		for(int i=0;i<s.length();i++)
		{
			for(int j=i+1;j<=s.length();j++)
				System.out.println(s.substring(i, j));
		}
	}
	void l()//addition of two matrix
	{
		int[][] arr={{1,2,3},{4,5,6}, {7,8,9}};
		int[][] ar={{3,2,1},{6,5,4},{9,8,7}};
		int[][] sum=new int[arr.length][arr[0].length];
		for(int i=0;i<arr.length;i++)
		{
			for(int j=0;j<ar.length;j++)
			{
					sum[i][j]=arr[i][j]+ar[i][j];
			}
		}
		for(int i=0;i<arr.length;i++)
		{
			for(int j=0;j<ar.length;j++)
				System.out.print(sum[i][j]+" ");
			System.out.println();
		}
	}
	void li()//multiplication of two matrix
	{
		/*int[][] arr={{1,2,3},{4,5,6}, {7,8,9}};
		int[][] ar={{1,2,3},{4,5,6}, {7,8,9}};*/
		int[][] arr={{1,1,1},{2,2,2},{3,3,3}};
		int[][] ar={{1,1,1},{2,2,2},{3,3,3}};
		int[][] mul=new int[arr.length][arr[0].length];
		for(int i=0;i<arr.length;i++)
		{
			for(int j=0;j<ar.length;j++)
			{
				mul[i][j]=0;
				for(int k=0;k<arr.length;k++)
				{
					mul[i][j]=mul[i][j]+(arr[i][k]*ar[k][j]);
				}
			}
		}
		for(int i=0;i<arr.length;i++)
		{
			for(int j=0;j<ar.length;j++)
				System.out.print(mul[i][j]+" ");
			System.out.println();
		}
	}
	void lii()//marge two array in one array
	{
		int[] arr={1,3,5,6};
		int[] ar={2,4,7,8,9};
		int[] marge=new int[arr.length+ar.length];
		int num=ar.length-1;
		for(int i=0;i<arr.length;i++)
		{
			marge[i]=arr[i];
			marge[num]=ar[i];
			num++;
		}
		Arrays.sort(marge);
		for(int i=0;i<marge.length;i++)
			System.out.println(marge[i]);
	}
	void nonduplicate()
	{
		int[] arr={1,5,9,4,2,3,6,1,5,2};//9,4,3,6
		for(int i=0;i<arr.length;i++)
		{
			int count=0;
			for(int j=0;j<arr.length;j++)//chage here j=0
			{
				if(arr[i]==arr[j])
					count++;
			}
			if(count<=1)//chage here
				System.out.println(arr[i]);
		}
	}
	void duplicate1()
	{
		int[] arr={1,5,9,4,2,3,6,1,5,2};//9,4,3,6
		for(int i=0;i<arr.length;i++)
		{
			int count=0;
			for(int j=i+1;j<arr.length;j++)//chage here j=i+1
			{
				if(arr[i]==arr[j])
					count++;
			}
			if(count>=1)//chage here
				System.out.println(arr[i]);
		}
	}
	void duplicate()
	{
		int[] arr={1,5,5,9,4,2,3,6,1,5,2};
		LinkedHashSet<Integer> li=new LinkedHashSet<Integer>();
		for(int i=0;i<arr.length;i++)
		{
			for(int j=i+1;j<arr.length;j++)
			{
				if(arr[i]==arr[j])
					li.add(arr[i]);
			}
		}
		for(int i: li)
			System.out.println(i);
	}
	void sort_without_using_method()
	{
		int[] ar={1,4,7,8,5,2,3,6,9};
		int temp=0;
		int count=0;
		for(int i=0;i<ar.length;i++)
		{
			for(int j=i+1;j<ar.length;j++)
			{
				if(ar[i]>ar[j])
				{
					temp=ar[i];
					ar[i]=ar[j];
					ar[j]=temp;
					count++;
				}
			}
		}
		System.out.println("number of step "+count);
		for(int i=0;i<ar.length;i++)
			System.out.println(ar[i]);
	}
	void first_larget_number_without_using_sort()
	{
		int[] arr={4,8,6,9,7,5,3,2,1};
		int num=arr[0];
		for(int i=0;i<arr.length;i++)
		{
			if(num<arr[i])
				num=arr[i];
		}
		System.out.println(num);
	}
	void secound_larget_number_without_using_sort()
	{
		int[] arr={4,8,6,9,7,4,5,3,2,1};
		int first=arr[0];
		int second=arr[0];
		for(int i=0;i<arr.length;i++)
		{
			if(first<arr[i])
			{
				second=first;
				first=arr[i];
			}
		}
		System.out.println(second);
	}
	void thrid_largest_number_without_using_sort()
	{
		int[] arr={7,8,9,4,5,6,3,2,5,1};
		int first=arr[0],second=0,thrid=0;
		for(int i=0;i<arr.length;i++)
		{
			if(first<arr[i])
				first=arr[i];
		}
		System.out.println("first largest number in array "+first);
		for(int i=0;i<arr.length;i++)
		{
			if(arr[i]>second && arr[i]<first)
				second=arr[i];
		}
		System.out.println("second largest number from array "+second);
		for(int i=0;i<arr.length;i++)
		{
			if(arr[i]>thrid && arr[i]<second)
				thrid=arr[i];
		}
		System.out.println("thrid largest number from array "+thrid);
	}
	void number_of_step_to_sort_array()
	{
			int[] ar={1,4,7,8,5,2,3,6,9};
			int temp=0;
			int count=0;
			for(int i=0;i<ar.length;i++)
			{
				for(int j=i+1;j<ar.length;j++)
				{
					if(ar[i]>ar[j])
					{
						temp=ar[i];
						ar[i]=ar[j];
						ar[j]=temp;
						count++;
					}
				}
			}
			System.out.println("number of step "+count);
	}
	void Substring()
	{
		String s="abcbba";
		for(int i=0;i<s.length();i++)
		{
			for(int j=i+1;j<=s.length();j++)
			{
				System.out.println(s.substring(i, j));
			}
		}
	}
	void longest_substring()//longest substring that have all different char
	{
		String s="abcbba";
		LinkedHashSet<String> set=new LinkedHashSet<String>();
		for(int i=0;i<s.length();i++)
		{
			String s1="";
			String s3="";
			s1=s1+s.charAt(i);
			for(int j=i+1;j<s.length();j++)
			{
				s3=""+s.charAt(j);
				if(!s1.contains(s3))
				{
					s1=s1+s3;
				}
				else
				break;
			}
			set.add(s1);
		}
		int max=0;
		for(String p : set)
		{
			if(p.length()>max)
			{
				max=p.length();
			}
		}
		for(String p: set)
		{
			if(p.length()==max)
				System.out.println(p);
		}
	}

    public static void main(String[] args) {
        lowercase lc = new lowercase();
         lc.one();
    }
}
